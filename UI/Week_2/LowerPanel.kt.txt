package com.company.eapc

import android.app.Activity
import android.widget.Toast
import androidx.compose.foundation.BorderStroke
import androidx.compose.ui.graphics.*;
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Shapes
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun callerCountDish(){
    var count by rememberSaveable() {
        mutableStateOf(0);
    };
    
    countDish(count, {count--}, {count++});
}

@Composable
fun weeklySpecial(){
    Card (
        modifier = Modifier.padding(start = 10.dp, top = 10.dp, bottom = 10.dp)
    ){
        Text(
            text = stringResource(id = R.string.card_a),
            fontSize = 26.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.background(Color.White)
        )
    }
}

@Composable
fun menuDish(){
    var context = LocalContext.current;
    Card (
        Modifier
            .padding(start = 10.dp, end = 10.dp, top = 5.dp, bottom = 5.dp),
        shape = RoundedCornerShape(5.dp)
    ){
        Column (
            modifier = Modifier.padding(start = 25.dp, top = 10.dp, bottom = 10.dp)
        ){
            Text(text = "Greek Salad",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
            )


            Text(text = "$12.99",
                color = androidx.compose.ui.graphics.Color.Gray,
                fontWeight = FontWeight.Bold,

                )

            Row (
                modifier = Modifier
                    .fillMaxWidth()
            ){
                Column {
                    Text(text = "The famous Greek salad of crispy lettuce, peppers, olives, our Chicago ...",
                        color = androidx.compose.ui.graphics.Color.Gray,
                        modifier = Modifier
                            .width(250.dp)
                            .padding(top = 10.dp, end = 30.dp)
                    )

                    Button(onClick = {
                        Toast.makeText(context, "Order Received.", Toast.LENGTH_LONG).show()
                    },
                        shape = RoundedCornerShape(5.dp),

                    ) {
                        Text(text = "Order")
                    }
                }

                Image(painter = painterResource(id = R.drawable.upperpanelimage),
                    contentDescription = "",
                    modifier = Modifier
                        .width(100.dp)
                        .border(BorderStroke(5.dp, Color.White))
                )

            }

        }
        Divider(
            modifier = Modifier.padding(top = 10.dp, bottom = 10.dp)
        )


        Column (
            modifier = Modifier.padding(start = 25.dp, top = 10.dp, bottom = 10.dp)
        ){
            Text(text = "Burger",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
            )


            Text(text = "$7.99",
                color = androidx.compose.ui.graphics.Color.Gray,
                fontWeight = FontWeight.Bold,

                )

            Row (
                modifier = Modifier
                    .fillMaxWidth()
            ){
                Column {
                    Text(text = stringResource(id = R.string.tile_2_desc),
                        color = androidx.compose.ui.graphics.Color.Gray,
                        modifier = Modifier
                            .width(250.dp)
                            .padding(top = 10.dp, end = 30.dp)
                    )

                    Button(onClick = {
                        Toast.makeText(context, "Order Received.", Toast.LENGTH_LONG).show()
                    },
                        shape = RoundedCornerShape(5.dp),

                        ) {
                        Text(text = "Order")
                    }
                }

                Image(painter = painterResource(id = R.drawable.img_1),
                    contentDescription = "",
                    modifier = Modifier
//                        .width(100.dp)
                        .height(160.dp)
//                        .border(BorderStroke(5.dp, Color.White))

                )

            }

        }

//        Divider(
//            modifier = Modifier.padding(top = 5.dp, bottom = 5.dp)
//        )
    }
}

@Composable
fun countDish(count:Int, onIncrement: ()->Unit, onDecrement: ()->Unit){
//    var count by rememberSaveable() {
//        mutableStateOf(0);
//    }

    Column (
        Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,

    ){
        Text(
            text = "Greek Salad",
            fontWeight = FontWeight.Bold,
            fontSize = 25.sp,

        )
        Row (
            Modifier.padding(top = 10.dp)
        ){
            IconButton(onClick = {
                if(count > 0){
                    onIncrement();
//                    count--;
                }
                                 },

                ) {
                Icon(imageVector = Icons.Default.KeyboardArrowDown,
                    contentDescription = "",
                    modifier = Modifier.size(200.dp)
                    )


            }

            Text(text = "${count}",
                modifier = Modifier.padding(start = 10.dp, end = 10.dp),
                fontSize = 30.sp,
            )

            IconButton(onClick = {
                    onDecrement()
            },

            ) {
                Icon(imageVector = Icons.Default.KeyboardArrowUp,
                    contentDescription = "",
                    modifier = Modifier.size(200.dp)
                )
            }
        }
    }
}

