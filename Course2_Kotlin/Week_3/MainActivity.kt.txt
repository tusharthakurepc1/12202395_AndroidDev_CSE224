package com.company.eapc

import android.os.Bundle
import android.view.MenuItem
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.Image
import androidx.compose.foundation.ScrollState
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
//import androidx.compose.foundation.layout.BoxScopeInstance.align
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
//import androidx.compose.foundation.layout.ColumnScopeInstance.align
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonColors
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.company.eapc.ui.theme.EAPCTheme
import java.util.Locale.Category

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {

	//  doSomething()

            SimpleUI {clickCount->
                Toast.makeText(this,
                    "Button is clicked $clickCount times",
                    Toast.LENGTH_SHORT).show()
            }

        }

    }

}



@Composable
fun MyCard(number:Int) {
    Card(
//        elevation = 16.dp,
        modifier = Modifier.padding(16.dp),

    )  {
        Text(
            text = number.toString(),
            fontSize = 22.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth()
            )
    }
}


class TestableClass(private val dependency: Dependency) 

fun doSomething() { 
    val doThisInTheDependency = { â€¦ } 
    dependency.doSomethingElse(doThisInTheDependency) 
} 

val mockDependency: Dependency = mock { 
    on { doSomethingElse() }.willAnswer { invocation -> 
        invocation.getArgument<() -> Unit>(0) () 
    } 

}


@Composable
fun SimpleUI(onClick: (Int)->Unit) {
    var count: Int = 0;
    Button(onClick = { onClick(count++) }) {
        Text(text = "Button")
    }
}

fun W3_Random() {
    var maximumDiscountValue = 0

    repeat(3) { index ->
        val discount = Random.nextInt(10)
        println("Attempt ${index+1}: $discount")
        if (discount > maximumDiscountValue) {
            maximumDiscountValue = discount
        }
    }

    println(maximumDiscountValue)
}


@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    EAPCTheme {
        Greeting("Android")
    }
}
